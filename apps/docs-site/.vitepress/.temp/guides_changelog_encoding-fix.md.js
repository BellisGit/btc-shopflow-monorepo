import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"文档编码修复完成报告","description":"","frontmatter":{"title":"文档编码修复完成报告","type":"changelog","project":"btc-shopflow","owner":"dev-team","created":"2025-10-13","updated":"2025-10-14","publish":true,"tags":["changelog","encoding"],"sidebar_label":"编码修复","sidebar_order":6,"sidebar_group":"changelog"},"headers":[],"relativePath":"guides/changelog/encoding-fix.md","filePath":"guides/changelog/encoding-fix.md","lastUpdated":1760420026000}');
const _sfc_main = { name: "guides/changelog/encoding-fix.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="文档编码修复完成报告" tabindex="-1">文档编码修复完成报告 <a class="header-anchor" href="#文档编码修复完成报告" aria-label="Permalink to &quot;文档编码修复完成报告&quot;">​</a></h1><h2 id="修复日期" tabindex="-1">修复日期 <a class="header-anchor" href="#修复日期" aria-label="Permalink to &quot;修复日期&quot;">​</a></h2><p>2025-10-13</p><h2 id="问题描述" tabindex="-1">问题描述 <a class="header-anchor" href="#问题描述" aria-label="Permalink to &quot;问题描述&quot;">​</a></h2><p>所有64个markdown文件遭受了严重的编码破坏：</p><ul><li>每个字符（包括英文中文标点空格）都被插入了全角冒号（<code>：</code>）作为分隔符</li><li>例如：<code># Title</code> → <code>：#： ：T：i：t：l：e：</code></li><li>导致文档完全不可读，VitePress无法正常解析</li></ul><h2 id="修复过程" tabindex="-1">修复过程 <a class="header-anchor" href="#修复过程" aria-label="Permalink to &quot;修复过程&quot;">​</a></h2><h3 id="_1-创建修复工具" tabindex="-1">1. 创建修复工具 <a class="header-anchor" href="#_1-创建修复工具" aria-label="Permalink to &quot;1. 创建修复工具&quot;">​</a></h3><p>创建了 <code>scripts/fix-colon-separator.ts</code> 工具脚本，使用正则表达式移除所有冒号分隔符</p><h3 id="_2-测试修复逻辑" tabindex="-1">2. 测试修复逻辑 <a class="header-anchor" href="#_2-测试修复逻辑" aria-label="Permalink to &quot;2. 测试修复逻辑&quot;">​</a></h3><p>先对5个文件进行测试修复，验证逻辑正确性：</p><ul><li>成功移除5,685个冒号分隔符</li><li>文件大小减少约50%</li><li>frontmatter和内容完整恢复</li></ul><h3 id="_3-批量修复" tabindex="-1">3. 批量修复 <a class="header-anchor" href="#_3-批量修复" aria-label="Permalink to &quot;3. 批量修复&quot;">​</a></h3><p>执行完整修复，处理所有64个文件：</p><ul><li><strong>总文件数</strong>: 64</li><li><strong>需要修复</strong>: 59</li><li><strong>已是正常</strong>: 5</li><li><strong>修复失败</strong>: 0</li><li><strong>移除冒号总数</strong>: 195,411</li><li><strong>文件大小减少</strong>: 194,557 字符（约50%）</li></ul><h3 id="_4-清理缓存" tabindex="-1">4. 清理缓存 <a class="header-anchor" href="#_4-清理缓存" aria-label="Permalink to &quot;4. 清理缓存&quot;">​</a></h3><ul><li>删除旧的 <code>encoding-issues-report.json</code></li><li>清理 VitePress 缓存（<code>.vitepress/cache/</code>）</li><li>清理构建产物（<code>.vitepress/dist/</code>）</li></ul><h3 id="_5-重启验证" tabindex="-1">5. 重启验证 <a class="header-anchor" href="#_5-重启验证" aria-label="Permalink to &quot;5. 重启验证&quot;">​</a></h3><ul><li>重启 VitePress 开发服务器</li><li>验证所有文档正常显示</li></ul><h2 id="修复结果" tabindex="-1">修复结果 <a class="header-anchor" href="#修复结果" aria-label="Permalink to &quot;修复结果&quot;">​</a></h2><p><strong>完全成功</strong></p><p>所有文档已恢复正常：</p><ul><li>frontmatter 格式正确</li><li>表格标题完整显示中文</li><li>章节标题完整显示中文</li><li>文档内容无乱码</li><li>VitePress 正常解析和渲染</li></ul><h2 id="技术细节" tabindex="-1">技术细节 <a class="header-anchor" href="#技术细节" aria-label="Permalink to &quot;技术细节&quot;">​</a></h2><h3 id="修复工具" tabindex="-1">修复工具 <a class="header-anchor" href="#修复工具" aria-label="Permalink to &quot;修复工具&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}">// scripts/fix-colon-separator.ts</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> colonRegex</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> =</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> /</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#DBEDFF" })}">：</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">/</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">g</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">;</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">const</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> fixedContent</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> =</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> content.</span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">replace</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">(colonRegex, </span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}">&#39;&#39;</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="修复统计" tabindex="-1">修复统计 <a class="header-anchor" href="#修复统计" aria-label="Permalink to &quot;修复统计&quot;">​</a></h3><ul><li><strong>处理文件</strong>: 64个</li><li><strong>移除冒号</strong>: 195,411个</li><li><strong>文件大小减少</strong>: 194,557字符</li><li><strong>成功率</strong>: 100%</li></ul><h2 id="预防措施" tabindex="-1">预防措施 <a class="header-anchor" href="#预防措施" aria-label="Permalink to &quot;预防措施&quot;">​</a></h2><ol><li><strong>编码规范</strong>: 统一使用UTF-8编码</li><li><strong>备份机制</strong>: 重要修改前自动备份</li><li><strong>验证流程</strong>: 修改后自动验证文档格式</li><li><strong>监控工具</strong>: 定期检查文档编码状态</li></ol><hr><p><strong>修复完成</strong>: 2025-10-13 <strong>修复工具</strong>: fix-colon-separator.ts <strong>影响范围</strong>: 64个Markdown文件 <strong>状态</strong>: 完全成功</p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("guides/changelog/encoding-fix.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const encodingFix = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  encodingFix as default
};
