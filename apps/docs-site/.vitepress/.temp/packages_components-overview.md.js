import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"组件包文档","description":"","frontmatter":{"title":"组件包文档","type":"package","project":"components","owner":"dev-team","created":"2025-10-13","updated":"2025-10-13","publish":true,"tags":["packages","components"],"sidebar_label":"组件包","sidebar_order":1,"sidebar_group":"packages"},"headers":[],"relativePath":"packages/components-overview.md","filePath":"packages/components-overview.md","lastUpdated":1760420026000}');
const _sfc_main = { name: "packages/components-overview.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="组件包文档" tabindex="-1">组件包文档 <a class="header-anchor" href="#组件包文档" aria-label="Permalink to &quot;组件包文档&quot;">​</a></h1><p>本部分包含了所有BTC组件包的详细文档，提供完整的API说明使用示例和最佳实践</p><h2 id="组件列表" tabindex="-1">组件列表 <a class="header-anchor" href="#组件列表" aria-label="Permalink to &quot;组件列表&quot;">​</a></h2><h3 id="核心组件" tabindex="-1">核心组件 <a class="header-anchor" href="#核心组件" aria-label="Permalink to &quot;核心组件&quot;">​</a></h3><ul><li><strong><a href="/internal/archive/packages/components/btc-crud">BTC CRUD</a></strong> - CRUD操作的核心组件，提供数据表格和操作功能</li><li><strong><a href="/internal/archive/packages/components/btc-dialog">BTC 对话框</a></strong> - 对话框和弹窗组件，支持多种交互模式</li><li><strong><a href="/internal/archive/packages/components/btc-form">BTC 表单</a></strong> - 表单输入和验证组件，支持复杂表单场景</li><li><strong><a href="/internal/archive/packages/components/btc-upsert">BTC 更新</a></strong> - 新增/编辑组件，统一的数据操作界面</li></ul><h3 id="辅助组件" tabindex="-1">辅助组件 <a class="header-anchor" href="#辅助组件" aria-label="Permalink to &quot;辅助组件&quot;">​</a></h3><ul><li><strong><a href="/internal/archive/packages/components/btc-svg">BTC SVG</a></strong> - SVG图标组件，提供统一的图标管理</li><li><strong><a href="/internal/archive/packages/components/btc-view-group">BTC 视图组</a></strong> - 视图组合组件，支持多种视图模式</li></ul><hr><h2 id="设计理念" tabindex="-1">设计理念 <a class="header-anchor" href="#设计理念" aria-label="Permalink to &quot;设计理念&quot;">​</a></h2><h3 id="_1-一致性" tabindex="-1">1. 一致性 <a class="header-anchor" href="#_1-一致性" aria-label="Permalink to &quot;1. 一致性&quot;">​</a></h3><ul><li>统一的视觉设计语言</li><li>一致的交互模式</li><li>标准化的API设计</li></ul><h3 id="_2-可扩展性" tabindex="-1">2. 可扩展性 <a class="header-anchor" href="#_2-可扩展性" aria-label="Permalink to &quot;2. 可扩展性&quot;">​</a></h3><ul><li>灵活的配置选项</li><li>丰富的自定义能力</li><li>插件化的扩展机制</li></ul><h3 id="_3-易用性" tabindex="-1">3. 易用性 <a class="header-anchor" href="#_3-易用性" aria-label="Permalink to &quot;3. 易用性&quot;">​</a></h3><ul><li>简单的API设计</li><li>完整的文档说明</li><li>丰富的使用示例</li></ul><hr><h2 id="架构特点" tabindex="-1">架构特点 <a class="header-anchor" href="#架构特点" aria-label="Permalink to &quot;架构特点&quot;">​</a></h2><h3 id="基于element-plus" tabindex="-1">基于Element Plus <a class="header-anchor" href="#基于element-plus" aria-label="Permalink to &quot;基于Element Plus&quot;">​</a></h3><ul><li>继承Element Plus的设计语言</li><li>扩展Element Plus的功能</li><li>保持API的一致性</li></ul><h3 id="typescript支持" tabindex="-1">TypeScript支持 <a class="header-anchor" href="#typescript支持" aria-label="Permalink to &quot;TypeScript支持&quot;">​</a></h3><ul><li>完整的类型定义</li><li>智能的代码提示</li><li>编译时类型检查</li></ul><h3 id="响应式设计" tabindex="-1">响应式设计 <a class="header-anchor" href="#响应式设计" aria-label="Permalink to &quot;响应式设计&quot;">​</a></h3><ul><li>支持移动端适配</li><li>灵活的布局系统</li><li>自适应的组件尺寸</li></ul><hr><h2 id="安装使用" tabindex="-1">安装使用 <a class="header-anchor" href="#安装使用" aria-label="Permalink to &quot;安装使用&quot;">​</a></h2><h3 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">pnpm</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> add</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> @btc/shared-components</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="基础使用" tabindex="-1">基础使用 <a class="header-anchor" href="#基础使用" aria-label="Permalink to &quot;基础使用&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">import</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> { BtcCrud, BtcForm, BtcDialog } </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">from</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &#39;@btc/shared-components&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="完整导入" tabindex="-1">完整导入 <a class="header-anchor" href="#完整导入" aria-label="Permalink to &quot;完整导入&quot;">​</a></h3><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">import</span><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}"> *</span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}"> as</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> BtcComponents </span><span style="${ssrRenderStyle({ "--shiki-light": "#D73A49", "--shiki-dark": "#F97583" })}">from</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> &#39;@btc/shared-components&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><hr><h2 id="相关文档" tabindex="-1">相关文档 <a class="header-anchor" href="#相关文档" aria-label="Permalink to &quot;相关文档&quot;">​</a></h2><ul><li><a href="/internal/archive/guides/components">组件开发指南</a></li><li><a href="/internal/archive/guides/design">设计规范</a></li><li><a href="/internal/archive/api/components">API参考</a></li></ul></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("packages/components-overview.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const componentsOverview = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  componentsOverview as default
};
