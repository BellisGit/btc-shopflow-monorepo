import { ssrRenderAttrs } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"创建 BtcDialog 和 BtcViewGroup 组件","description":"","frontmatter":{"title":"创建 BtcDialog 和 BtcViewGroup 组件","type":"adr","project":"technical","owner":"dev-team","created":"2025-10-12","updated":"2025-10-13","publish":true,"tags":["adr","technical","components","dialog"],"sidebar_label":"BtcDialog 组件","sidebar_order":3,"sidebar_group":"adr-technical"},"headers":[],"relativePath":"adr/technical/btc-dialog.md","filePath":"adr/technical/btc-dialog.md","lastUpdated":1760420026000}');
const _sfc_main = { name: "adr/technical/btc-dialog.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="adr-创建-btcdialog-和-btcviewgroup-组件" tabindex="-1">ADR: 创建 BtcDialog 和 BtcViewGroup 组件 <a class="header-anchor" href="#adr-创建-btcdialog-和-btcviewgroup-组件" aria-label="Permalink to &quot;ADR: 创建 BtcDialog 和 BtcViewGroup 组件&quot;">​</a></h1><blockquote><p><strong>状态</strong>: 已采纳<br><strong>日期</strong>: 2025-10-12<br><strong>决策者</strong>: 开发团队<br><strong>影响范围</strong>: 组件库和UI系统</p></blockquote><hr><h2 id="context" tabindex="-1">Context <a class="header-anchor" href="#context" aria-label="Permalink to &quot;Context&quot;">​</a></h2><p>当前系统使用 Element Plus 的 <code>el-dialog</code> 作为弹窗组件，但缺少以下功能：</p><ol><li>全屏/最小化控制</li><li>双击标题栏快速切换全屏</li><li>自定义控制按钮</li><li>KeepAlive 缓存</li></ol><p>同时，权限管理页面（如用户列表）需要左右分栏布局（左侧树形菜单 + 右侧 CRUD 表格），但没有现成的组件</p><p>参考 cool-admin 的 <code>cl-dialog</code> 和 <code>cl-view-group</code> 组件，决定为 BTC 项目创建对应的增强组件</p><h2 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;Options&quot;">​</a></h2><h3 id="option-a-继续使用-el-dialog" tabindex="-1">Option A: 继续使用 el-dialog <a class="header-anchor" href="#option-a-继续使用-el-dialog" aria-label="Permalink to &quot;Option A: 继续使用 el-dialog&quot;">​</a></h3><ul><li>无需额外开发</li><li>Element Plus 原生支持</li><li>功能受限</li><li>需要在每个页面重复实现全屏逻辑</li></ul><h3 id="option-b-直接复用-cool-admin-组件" tabindex="-1">Option B: 直接复用 cool-admin 组件 <a class="header-anchor" href="#option-b-直接复用-cool-admin-组件" aria-label="Permalink to &quot;Option B: 直接复用 cool-admin 组件&quot;">​</a></h3><ul><li>功能完整</li><li>依赖 @cool-vue/crud</li><li>与 BTC 组件体系不统一</li><li>样式风格不一致</li></ul><h3 id="option-c-创建-btcdialog-和-btcviewgroup-选择" tabindex="-1">Option C: 创建 BtcDialog 和 BtcViewGroup（ 选择） <a class="header-anchor" href="#option-c-创建-btcdialog-和-btcviewgroup-选择" aria-label="Permalink to &quot;Option C: 创建 BtcDialog 和 BtcViewGroup（ 选择）&quot;">​</a></h3><ul><li>功能完整且符合 BTC 需求</li><li>独立实现，无外部依赖</li><li>与现有组件体系统一</li><li>支持自动导入</li><li>需要开发和维护</li></ul><h2 id="decision" tabindex="-1">Decision <a class="header-anchor" href="#decision" aria-label="Permalink to &quot;Decision&quot;">​</a></h2><p><strong>选择 Option C</strong>：创建 <code>BtcDialog</code> 和 <code>BtcViewGroup</code> 组件</p><p><strong>理由</strong>：</p><ol><li><strong>功能完整性</strong>：提供全屏最小化自定义控制等增强功能</li><li><strong>独立性</strong>：不依赖外部 CRUD 库，减少依赖</li><li><strong>统一性</strong>：与 BTC 组件命名和风格保持一致</li><li><strong>可维护性</strong>：代码简洁，易于理解和修改</li><li><strong>自动导入</strong>：通过 unplugin-vue-components 自动导入，开箱即用</li></ol><h2 id="implementation" tabindex="-1">Implementation <a class="header-anchor" href="#implementation" aria-label="Permalink to &quot;Implementation&quot;">​</a></h2><h3 id="_1-btcdialog-组件" tabindex="-1">1. BtcDialog 组件 <a class="header-anchor" href="#_1-btcdialog-组件" aria-label="Permalink to &quot;1. BtcDialog 组件&quot;">​</a></h3><p><strong>位置</strong>：<code>packages/shared-components/src/common/dialog/index.vue</code></p><p><strong>特性</strong>：</p><ul><li>基于 <code>el-dialog</code> 封装</li><li>支持全屏/最小化控制</li><li>支持双击标题栏全屏</li><li>支持自定义控制按钮</li><li>支持 KeepAlive 缓存</li><li>支持 el-scrollbar 滚动</li><li>支持背景透明</li></ul><p><strong>API</strong>：</p><ul><li>Props: <code>modelValue</code>, <code>title</code>, <code>width</code>, <code>height</code>, <code>padding</code>, <code>keepAlive</code>, <code>fullscreen</code>, <code>controls</code>, <code>hideHeader</code>, <code>beforeClose</code>, <code>scrollbar</code>, <code>transparent</code></li><li>Events: <code>update:modelValue</code>, <code>fullscreen-change</code></li><li>Expose: <code>visible</code>, <code>isFullscreen</code>, <code>open()</code>, <code>close()</code>, <code>toggleFullscreen()</code></li></ul><h3 id="_2-btcviewgroup-组件" tabindex="-1">2. BtcViewGroup 组件 <a class="header-anchor" href="#_2-btcviewgroup-组件" aria-label="Permalink to &quot;2. BtcViewGroup 组件&quot;">​</a></h3><p><strong>位置</strong>：<code>packages/shared-components/src/common/view-group/index.vue</code></p><p><strong>特性</strong>：</p><ul><li>左右分栏布局</li><li>左侧支持树形结构或列表</li><li>响应式设计（移动端折叠）</li><li>关键字搜索</li><li>懒加载（无限滚动）</li><li>刷新/新增/右键菜单</li></ul><p><strong>API</strong>：</p><ul><li>Props: <code>options</code> (配置对象)</li><li>Slots: <code>left</code>, <code>right</code>, <code>left-op</code>, <code>right-op</code>, <code>title</code>, <code>item</code>, <code>item-name</code></li><li>Expose: <code>list</code>, <code>selected</code>, <code>expand()</code>, <code>select()</code>, <code>refresh()</code>, <code>edit()</code>, <code>remove()</code></li></ul><h3 id="_3-btcupsert-升级" tabindex="-1">3. BtcUpsert 升级 <a class="header-anchor" href="#_3-btcupsert-升级" aria-label="Permalink to &quot;3. BtcUpsert 升级&quot;">​</a></h3><p><strong>变更</strong>：</p><ul><li>将内部 <code>el-dialog</code> 替换为 <code>BtcDialog</code></li><li>移除 <code>closeOnClickModal</code> prop（改为通过 <code>dialogProps</code> 传递）</li><li>优化关闭时的表单清理逻辑</li></ul><p><strong>影响页面</strong>：10 个权限管理页面（自动升级，无需手动修改）</p><h2 id="consequences" tabindex="-1">Consequences <a class="header-anchor" href="#consequences" aria-label="Permalink to &quot;Consequences&quot;">​</a></h2><h3 id="正向影响" tabindex="-1">正向影响 <a class="header-anchor" href="#正向影响" aria-label="Permalink to &quot;正向影响&quot;">​</a></h3><ol><li><strong>用户体验提升</strong>：</li></ol><ul><li>长表单可以全屏编辑，提升效率</li><li>双击快速切换，操作更流畅</li><li>统一的视觉风格，更专业</li></ul><ol start="2"><li><strong>开发体验提升</strong>：</li></ol><ul><li>自动导入，无需手动 import</li><li>简化的 API，易于使用</li><li>完整的 TypeScript 类型支持</li></ul><ol start="3"><li><strong>可维护性提升</strong>：</li></ol><ul><li>组件独立，易于测试和修改</li><li>文档完善，便于新人上手</li><li>统一管理，减少重复代码</li></ul><ol start="4"><li><strong>功能扩展性</strong>：</li></ol><ul><li>可以轻松添加更多控制按钮</li><li>支持自定义样式和行为</li><li>为未来的功能预留空间</li></ul><h3 id="负向影响" tabindex="-1">负向影响 <a class="header-anchor" href="#负向影响" aria-label="Permalink to &quot;负向影响&quot;">​</a></h3><ol><li><strong>维护成本</strong>：</li></ol><ul><li>需要维护两个新组件</li><li>需要同步 Element Plus 的更新</li></ul><ol start="2"><li><strong>学习成本</strong>：</li></ol><ul><li>开发者需要了解新组件的 API</li><li>需要阅读相关文档</li></ul><ol start="3"><li><strong>破坏性变更</strong>：</li></ol><ul><li>移除了 <code>closeOnClickModal</code> prop（影响较小）</li><li>使用该 prop 的代码需要迁移</li></ul><h3 id="缓解措施" tabindex="-1">缓解措施 <a class="header-anchor" href="#缓解措施" aria-label="Permalink to &quot;缓解措施&quot;">​</a></h3><ol><li><strong>完善文档</strong>：</li></ol><ul><li>创建详细的 README 和使用示例</li><li>提供迁移指南和最佳实践</li><li>记录 CHANGELOG</li></ul><ol start="2"><li><strong>自动升级</strong>：</li></ol><ul><li><code>BtcUpsert</code> 的升级是透明的</li><li>大部分页面无需修改代码</li></ul><ol start="3"><li><strong>向后兼容</strong>：</li></ol><ul><li>保留 <code>dialogProps</code> 属性，允许灵活配置</li><li>默认行为与 <code>el-dialog</code> 一致</li></ul><hr><h2 id="相关文件" tabindex="-1">相关文件 <a class="header-anchor" href="#相关文件" aria-label="Permalink to &quot;相关文件&quot;">​</a></h2><ul><li><code>packages/shared-components/src/common/dialog/index.vue</code></li><li><code>packages/shared-components/src/common/dialog/README.md</code></li><li><code>packages/shared-components/src/common/view-group/index.vue</code></li><li><code>packages/shared-components/src/common/view-group/README.md</code></li><li><code>packages/shared-components/src/crud/upsert/index.vue</code></li><li><code>packages/shared-components/CHANGELOG.md</code></li><li><code>docs/UPSERT-DIALOG-UPGRADE.md</code></li><li><code>docs/BTC-GLOBAL-COMPONENTS.md</code></li></ul></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("adr/technical/btc-dialog.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const btcDialog = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  btcDialog as default
};
