import { ssrRenderAttrs } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"后端架构概览","description":"","frontmatter":{"title":"后端架构概览","type":"guide","project":"backend","owner":"dev-team","created":"2025-10-14","updated":"2025-10-14","publish":true,"tags":["overview","backend","architecture","microservices"],"sidebar_label":"后端架构","sidebar_order":5,"sidebar_group":"guides-backend"},"headers":[],"relativePath":"guides/backend-architecture.md","filePath":"guides/backend-architecture.md","lastUpdated":1760420026000}');
const _sfc_main = { name: "guides/backend-architecture.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="后端架构概览" tabindex="-1">后端架构概览 <a class="header-anchor" href="#后端架构概览" aria-label="Permalink to &quot;后端架构概览&quot;">​</a></h1><h2 id="架构概述" tabindex="-1">架构概述 <a class="header-anchor" href="#架构概述" aria-label="Permalink to &quot;架构概述&quot;">​</a></h2><p>BTC车间流程管理系统采用微服务架构，通过服务拆分实现高内聚、低耦合的系统设计。</p><h2 id="服务架构" tabindex="-1">服务架构 <a class="header-anchor" href="#服务架构" aria-label="Permalink to &quot;服务架构&quot;">​</a></h2><h3 id="核心服务" tabindex="-1">核心服务 <a class="header-anchor" href="#核心服务" aria-label="Permalink to &quot;核心服务&quot;">​</a></h3><ul><li><strong>网关服务</strong>: API网关，统一入口</li><li><strong>系统服务</strong>: 用户、角色、权限管理</li><li><strong>管理服务</strong>: 系统管理和配置</li><li><strong>通用服务</strong>: 公共功能和工具</li></ul><h3 id="业务服务" tabindex="-1">业务服务 <a class="header-anchor" href="#业务服务" aria-label="Permalink to &quot;业务服务&quot;">​</a></h3><ul><li><strong>调度服务</strong>: 任务调度和流程管理</li><li><strong>通知服务</strong>: 消息推送和通知</li><li><strong>搜索服务</strong>: 全文搜索功能</li><li><strong>上传服务</strong>: 文件上传和管理</li></ul><h2 id="技术栈" tabindex="-1">技术栈 <a class="header-anchor" href="#技术栈" aria-label="Permalink to &quot;技术栈&quot;">​</a></h2><h3 id="后端技术" tabindex="-1">后端技术 <a class="header-anchor" href="#后端技术" aria-label="Permalink to &quot;后端技术&quot;">​</a></h3><ul><li><strong>框架</strong>: Spring Boot + Spring Cloud</li><li><strong>数据库</strong>: MySQL + Redis</li><li><strong>消息队列</strong>: RabbitMQ</li><li><strong>搜索引擎</strong>: Elasticsearch</li></ul><h3 id="部署架构" tabindex="-1">部署架构 <a class="header-anchor" href="#部署架构" aria-label="Permalink to &quot;部署架构&quot;">​</a></h3><ul><li><strong>容器化</strong>: Docker + Kubernetes</li><li><strong>服务发现</strong>: Eureka</li><li><strong>配置管理</strong>: Config Server</li><li><strong>链路追踪</strong>: Zipkin</li></ul><h2 id="服务间通信" tabindex="-1">服务间通信 <a class="header-anchor" href="#服务间通信" aria-label="Permalink to &quot;服务间通信&quot;">​</a></h2><h3 id="同步通信" tabindex="-1">同步通信 <a class="header-anchor" href="#同步通信" aria-label="Permalink to &quot;同步通信&quot;">​</a></h3><ul><li><strong>HTTP/REST</strong>: 服务间API调用</li><li><strong>负载均衡</strong>: Ribbon + Feign</li><li><strong>熔断降级</strong>: Hystrix</li></ul><h3 id="异步通信" tabindex="-1">异步通信 <a class="header-anchor" href="#异步通信" aria-label="Permalink to &quot;异步通信&quot;">​</a></h3><ul><li><strong>消息队列</strong>: 事件驱动架构</li><li><strong>消息确认</strong>: 可靠消息传递</li><li><strong>死信队列</strong>: 异常消息处理</li></ul><h2 id="数据管理" tabindex="-1">数据管理 <a class="header-anchor" href="#数据管理" aria-label="Permalink to &quot;数据管理&quot;">​</a></h2><h3 id="数据一致性" tabindex="-1">数据一致性 <a class="header-anchor" href="#数据一致性" aria-label="Permalink to &quot;数据一致性&quot;">​</a></h3><ul><li><strong>分布式事务</strong>: Seata</li><li><strong>数据同步</strong>: Canal</li><li><strong>缓存策略</strong>: Redis + 本地缓存</li></ul><h3 id="数据安全" tabindex="-1">数据安全 <a class="header-anchor" href="#数据安全" aria-label="Permalink to &quot;数据安全&quot;">​</a></h3><ul><li><strong>数据加密</strong>: AES加密</li><li><strong>访问控制</strong>: RBAC权限模型</li><li><strong>审计日志</strong>: 操作记录和追踪</li></ul><h2 id="监控运维" tabindex="-1">监控运维 <a class="header-anchor" href="#监控运维" aria-label="Permalink to &quot;监控运维&quot;">​</a></h2><h3 id="系统监控" tabindex="-1">系统监控 <a class="header-anchor" href="#系统监控" aria-label="Permalink to &quot;系统监控&quot;">​</a></h3><ul><li><strong>指标监控</strong>: Prometheus + Grafana</li><li><strong>日志聚合</strong>: ELK Stack</li><li><strong>健康检查</strong>: Actuator</li></ul><h3 id="性能优化" tabindex="-1">性能优化 <a class="header-anchor" href="#性能优化" aria-label="Permalink to &quot;性能优化&quot;">​</a></h3><ul><li><strong>连接池</strong>: HikariCP</li><li><strong>缓存优化</strong>: 多级缓存策略</li><li><strong>数据库优化</strong>: 索引和查询优化</li></ul><h2 id="扩展性设计" tabindex="-1">扩展性设计 <a class="header-anchor" href="#扩展性设计" aria-label="Permalink to &quot;扩展性设计&quot;">​</a></h2><h3 id="水平扩展" tabindex="-1">水平扩展 <a class="header-anchor" href="#水平扩展" aria-label="Permalink to &quot;水平扩展&quot;">​</a></h3><ul><li><strong>无状态设计</strong>: 支持多实例部署</li><li><strong>数据库分片</strong>: 读写分离</li><li><strong>缓存集群</strong>: Redis Cluster</li></ul><h3 id="垂直扩展" tabindex="-1">垂直扩展 <a class="header-anchor" href="#垂直扩展" aria-label="Permalink to &quot;垂直扩展&quot;">​</a></h3><ul><li><strong>服务拆分</strong>: 按业务域拆分</li><li><strong>资源隔离</strong>: 独立部署和扩容</li><li><strong>故障隔离</strong>: 服务间故障不传播</li></ul><hr><p><strong>架构状态</strong>: 生产环境 <strong>维护团队</strong>: 后端团队 <strong>最后更新</strong>: 2025-10-14</p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("guides/backend-architecture.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const backendArchitecture = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  backendArchitecture as default
};
