import { ssrRenderAttrs, ssrRenderStyle } from "vue/server-renderer";
import { useSSRContext } from "vue";
import { _ as _export_sfc } from "./plugin-vue_export-helper.1tPrXgE0.js";
const __pageData = JSON.parse('{"title":"主应用（Main App）","description":"","frontmatter":{"title":"主应用（Main App）","type":"guide","project":"main-app","owner":"dev-team","created":"2025-10-14","updated":"2025-10-14","publish":true,"tags":["overview","main-app","micro-frontend"],"sidebar_label":"主应用说明","sidebar_order":4,"sidebar_group":"guides"},"headers":[],"relativePath":"guides/main-app-readme.md","filePath":"guides/main-app-readme.md","lastUpdated":1760420026000}');
const _sfc_main = { name: "guides/main-app-readme.md" };
function _sfc_ssrRender(_ctx, _push, _parent, _attrs, $props, $setup, $data, $options) {
  _push(`<div${ssrRenderAttrs(_attrs)}><h1 id="主应用-main-app" tabindex="-1">主应用（Main App） <a class="header-anchor" href="#主应用-main-app" aria-label="Permalink to &quot;主应用（Main App）&quot;">​</a></h1><p><strong>角色</strong>：微前端架构的主应用（基座应用）+ 系统管理功能</p><h2 id="核心功能" tabindex="-1">核心功能 <a class="header-anchor" href="#核心功能" aria-label="Permalink to &quot;核心功能&quot;">​</a></h2><h3 id="_1-微前端容器" tabindex="-1">1. 微前端容器 <a class="header-anchor" href="#_1-微前端容器" aria-label="Permalink to &quot;1. 微前端容器&quot;">​</a></h3><ul><li><strong>qiankun基座</strong>: 提供子应用加载和管理能力</li><li><strong>应用切换</strong>: 支持多个子应用的无缝切换</li><li><strong>全局状态</strong>: 管理跨应用的共享状态</li><li><strong>通信机制</strong>: 提供应用间通信能力</li></ul><h3 id="_2-系统管理" tabindex="-1">2. 系统管理 <a class="header-anchor" href="#_2-系统管理" aria-label="Permalink to &quot;2. 系统管理&quot;">​</a></h3><ul><li><strong>用户管理</strong>: 用户账户、角色、权限管理</li><li><strong>组织架构</strong>: 部门、角色、用户关系管理</li><li><strong>系统配置</strong>: 系统参数和配置管理</li><li><strong>平台治理</strong>: 域、模块、插件管理</li></ul><h3 id="_3-全局布局" tabindex="-1">3. 全局布局 <a class="header-anchor" href="#_3-全局布局" aria-label="Permalink to &quot;3. 全局布局&quot;">​</a></h3><ul><li><strong>顶部导航</strong>: 应用切换器和用户信息</li><li><strong>侧边菜单</strong>: 动态菜单和导航</li><li><strong>主题切换</strong>: 浅色/深色主题支持</li><li><strong>国际化</strong>: 多语言支持</li></ul><h2 id="技术架构" tabindex="-1">技术架构 <a class="header-anchor" href="#技术架构" aria-label="Permalink to &quot;技术架构&quot;">​</a></h2><h3 id="前端技术栈" tabindex="-1">前端技术栈 <a class="header-anchor" href="#前端技术栈" aria-label="Permalink to &quot;前端技术栈&quot;">​</a></h3><ul><li><strong>框架</strong>: Vue 3 + TypeScript</li><li><strong>构建工具</strong>: Vite</li><li><strong>UI组件</strong>: Element Plus</li><li><strong>状态管理</strong>: Pinia</li><li><strong>路由</strong>: Vue Router</li><li><strong>微前端</strong>: qiankun</li></ul><h3 id="核心组件" tabindex="-1">核心组件 <a class="header-anchor" href="#核心组件" aria-label="Permalink to &quot;核心组件&quot;">​</a></h3><ul><li><strong>应用容器</strong>: 子应用加载和管理</li><li><strong>布局组件</strong>: 全局布局和导航</li><li><strong>权限组件</strong>: 权限控制和路由守卫</li><li><strong>通信组件</strong>: 跨应用通信机制</li></ul><h2 id="目录结构" tabindex="-1">目录结构 <a class="header-anchor" href="#目录结构" aria-label="Permalink to &quot;目录结构&quot;">​</a></h2><div class="language- vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>main-app/</span></span>
<span class="line"><span>├── src/</span></span>
<span class="line"><span>│   ├── components/     # 全局组件</span></span>
<span class="line"><span>│   ├── layout/         # 布局组件</span></span>
<span class="line"><span>│   ├── pages/          # 页面组件</span></span>
<span class="line"><span>│   ├── plugins/        # 插件配置</span></span>
<span class="line"><span>│   ├── router/         # 路由配置</span></span>
<span class="line"><span>│   ├── stores/         # 状态管理</span></span>
<span class="line"><span>│   └── utils/          # 工具函数</span></span>
<span class="line"><span>├── public/             # 静态资源</span></span>
<span class="line"><span>└── package.json        # 项目配置</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="开发指南" tabindex="-1">开发指南 <a class="header-anchor" href="#开发指南" aria-label="Permalink to &quot;开发指南&quot;">​</a></h2><h3 id="启动开发服务器" tabindex="-1">启动开发服务器 <a class="header-anchor" href="#启动开发服务器" aria-label="Permalink to &quot;启动开发服务器&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">pnpm</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> dev:main</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6A737D", "--shiki-dark": "#6A737D" })}"># 或</span></span>
<span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#005CC5", "--shiki-dark": "#79B8FF" })}">cd</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> apps/main-app</span><span style="${ssrRenderStyle({ "--shiki-light": "#24292E", "--shiki-dark": "#E1E4E8" })}"> &amp;&amp; </span><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">pnpm</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> dev</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h3 id="访问地址" tabindex="-1">访问地址 <a class="header-anchor" href="#访问地址" aria-label="Permalink to &quot;访问地址&quot;">​</a></h3><ul><li><strong>本地访问</strong>: <a href="http://localhost:8080" target="_blank" rel="noreferrer">http://localhost:8080</a></li><li><strong>网络访问</strong>: http://[你的IP]:8080</li></ul><h3 id="环境配置" tabindex="-1">环境配置 <a class="header-anchor" href="#环境配置" aria-label="Permalink to &quot;环境配置&quot;">​</a></h3><ul><li><strong>开发环境</strong>: 自动加载子应用</li><li><strong>生产环境</strong>: 支持独立部署</li></ul><h2 id="部署说明" tabindex="-1">部署说明 <a class="header-anchor" href="#部署说明" aria-label="Permalink to &quot;部署说明&quot;">​</a></h2><h3 id="构建命令" tabindex="-1">构建命令 <a class="header-anchor" href="#构建命令" aria-label="Permalink to &quot;构建命令&quot;">​</a></h3><div class="language-bash vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="${ssrRenderStyle({ "--shiki-light": "#6F42C1", "--shiki-dark": "#B392F0" })}">pnpm</span><span style="${ssrRenderStyle({ "--shiki-light": "#032F62", "--shiki-dark": "#9ECBFF" })}"> build:main</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="部署要求" tabindex="-1">部署要求 <a class="header-anchor" href="#部署要求" aria-label="Permalink to &quot;部署要求&quot;">​</a></h3><ul><li><strong>Node.js</strong>: &gt;= 18.0.0</li><li><strong>静态服务器</strong>: Nginx 或 Apache</li><li><strong>HTTPS</strong>: 生产环境建议使用HTTPS</li></ul><h3 id="配置要点" tabindex="-1">配置要点 <a class="header-anchor" href="#配置要点" aria-label="Permalink to &quot;配置要点&quot;">​</a></h3><ul><li><strong>子应用配置</strong>: 确保子应用地址正确</li><li><strong>跨域设置</strong>: 配置CORS允许子应用访问</li><li><strong>缓存策略</strong>: 设置合适的缓存策略</li></ul><hr><p><strong>应用类型</strong>: 微前端主应用 <strong>端口</strong>: 8080 <strong>维护团队</strong>: 前端团队</p></div>`);
}
const _sfc_setup = _sfc_main.setup;
_sfc_main.setup = (props, ctx) => {
  const ssrContext = useSSRContext();
  (ssrContext.modules || (ssrContext.modules = /* @__PURE__ */ new Set())).add("guides/main-app-readme.md");
  return _sfc_setup ? _sfc_setup(props, ctx) : void 0;
};
const mainAppReadme = /* @__PURE__ */ _export_sfc(_sfc_main, [["ssrRender", _sfc_ssrRender]]);
export {
  __pageData,
  mainAppReadme as default
};
